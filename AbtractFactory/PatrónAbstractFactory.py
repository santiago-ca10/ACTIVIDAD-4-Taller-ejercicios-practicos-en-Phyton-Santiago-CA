from abc import ABC, abstractmethod  # Importa clases para crear interfaces abstractas


# Abstract Product

class Institucion(ABC):  # Clase abstracta que define una instituci√≥n
    def __init__(self, nombre, presupuesto):
        self.nombre = nombre  # Nombre de la instituci√≥n
        self.presupuesto = presupuesto  # Presupuesto de la instituci√≥n

    @abstractmethod
    def describir(self):  # M√©todo que debe ser implementado por las subclases
        pass


# Concrete Products

class InstitucionPublica(Institucion):  # Implementaci√≥n concreta de una instituci√≥n p√∫blica
    def describir(self):
        # Devuelve una descripci√≥n espec√≠fica para instituciones p√∫blicas
        return f"[P√öBLICA] {self.nombre} - Presupuesto estatal: ${self.presupuesto} millones"

class InstitucionPrivada(Institucion):  # Implementaci√≥n concreta de una instituci√≥n privada
    def describir(self):
        # Devuelve una descripci√≥n espec√≠fica para instituciones privadas
        return f"[PRIVADA] {self.nombre} - Presupuesto propio: ${self.presupuesto} millones"


# Abstract Factory

class FabricaInstitucion(ABC):  # Interfaz abstracta para la f√°brica de instituciones
    @abstractmethod
    def crear_institucion(self, nombre, presupuesto):  # M√©todo a implementar por cada f√°brica concreta
        pass


# Concrete Factories

class FabricaPublica(FabricaInstitucion):  # F√°brica concreta para instituciones p√∫blicas
    def crear_institucion(self, nombre, presupuesto):
        return InstitucionPublica(nombre, presupuesto)  # Crea y retorna una instituci√≥n p√∫blica

class FabricaPrivada(FabricaInstitucion):  # F√°brica concreta para instituciones privadas
    def crear_institucion(self, nombre, presupuesto):
        return InstitucionPrivada(nombre, presupuesto)  # Crea y retorna una instituci√≥n privada


# Men√∫ Interactivo

def menu():
    instituciones = []  # Lista para almacenar las instituciones creadas

    while True:
        # Muestra el men√∫ de opciones
        print("\n--- Registro de Instituciones ---")
        print("1. Crear instituci√≥n p√∫blica")
        print("2. Crear instituci√≥n privada")
        print("3. Ver instituciones registradas")
        print("4. Salir")

        opcion = input("Selecciona una opci√≥n: ")  # Captura la opci√≥n del usuario

        if opcion == "1":
            # Crear instituci√≥n p√∫blica
            nombre = input("Nombre de la instituci√≥n p√∫blica: ")
            presupuesto = input("Presupuesto en millones: ")
            fabrica = FabricaPublica()  # Usa la f√°brica p√∫blica
            institucion = fabrica.crear_institucion(nombre, presupuesto)  # Crea la instancia
            instituciones.append(institucion)  # Agrega a la lista
            print("‚úÖ Instituci√≥n p√∫blica creada con √©xito.")

        elif opcion == "2":
            # Crear instituci√≥n privada
            nombre = input("Nombre de la instituci√≥n privada: ")
            presupuesto = input("Presupuesto en millones: ")
            fabrica = FabricaPrivada()  # Usa la f√°brica privada
            institucion = fabrica.crear_institucion(nombre, presupuesto)  # Crea la instancia
            instituciones.append(institucion)  # Agrega a la lista
            print("‚úÖ Instituci√≥n privada creada con √©xito.")

        elif opcion == "3":
            # Mostrar instituciones registradas
            print("\nüìã Instituciones registradas:")
            if not instituciones:
                print("No hay instituciones a√∫n.")
            else:
                for i, inst in enumerate(instituciones, 1):  # Muestra todas con su descripci√≥n
                    print(f"{i}. {inst.describir()}")

        elif opcion == "4":
            # Salir del programa
            print("üëã Saliendo del programa.")
            break

        else:
            # Opci√≥n inv√°lida
            print("‚ö†Ô∏è Opci√≥n inv√°lida. Intenta de nuevo.")

# Punto de entrada

if __name__ == "__main__":
    menu()  # Llama a la funci√≥n del men√∫ si se ejecuta directamente el script
